var MinesweeperGame =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = EventDispatcher;\r\n \r\n/**\r\n * Class EventDispatcher\r\n * @property {Object} target - Event target\r\n * @property {Object.<string, Array>} _listeners - Events types and Arrays of functions\r\n */\r\nfunction EventDispatcher() {\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Subscribing method\r\n * @param {function} listener - Functions that handle the event\r\n * @param {constant} type\r\n*/\r\nEventDispatcher.prototype.subscribe = function(type, listener) {\r\n   \r\n    if (! (type in this._listeners) ) {\r\n        \r\n        this._listeners[type] = [];\r\n    }\r\n    \r\n    this._listeners[type].push(listener);\r\n}\r\n\r\n/**\r\n * Exec listeners function\r\n * @param {GameEvent} event - Store type and target of event\r\n * @property {constant} type - Type of event\r\n * @property {Object} target - Event target\r\n */\r\nEventDispatcher.prototype.dispatchEvent = function(event){\r\n\r\n    var type = event.type;\r\n    var target = event.target;\r\n        \r\n    if (this._listeners.hasOwnProperty(type)) {\r\n        \r\n        var listeners = this._listeners[type];\r\n        \r\n        for (var i = 0; i < listeners.length; i++) { \r\n       \r\n            listeners[i](type, target);        \r\n        }        \r\n    }\r\n }\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/EventDispatcher.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/EventDispatcher.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = BrowserView;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\nvar ViewHelper = __webpack_require__(10);    \r\nvar EventDispatcher = __webpack_require__(0);\r\n\r\n/**\r\n * Browser View of MinesweeperGame\r\n * @property {DOMElement} bar  - Link on Status bar\r\n * @property {DOMElement} button  - Link on Start bar\r\n * @property {DOMElement} mineButton  - Link on 'show mines' button\r\n * @property {DOMElement} field  - Link on Game field\r\n * @property {EventDispatcher} eventDispatcher\r\n */\r\nfunction BrowserView() {\r\n    \r\n    this.bar = null;\r\n    this.button = null;\r\n    this.mineButton = null;\r\n    this.field = null;\r\n    this.eventDispatcher = new EventDispatcher();\r\n    \r\n};\r\n\r\n\r\n/**\r\n * Attaching model and subscribing for events\r\n * @param {MinesweeperGame} model\r\n */\r\nBrowserView.prototype.attach = function(model) {\r\n    \r\n    this.model = model;\r\n    var that = this;\r\n    \r\n    this.model.eventDispatcher.subscribe( GameEvent.CELL_OPENED, function (status, cell) {\r\n        that.updateCellStatus(status, cell); \r\n    });\r\n    this.model.eventDispatcher.subscribe(GameEvent.UPDATE_GAME_STATUS, function (type, status) {\r\n        that.updateGameStatus(status); \r\n    });\r\n    this.model.eventDispatcher.subscribe( GameEvent.CELL_MARKED, function (status, cell) {\r\n        that.setFlag(cell); \r\n    });\r\n    this.model.eventDispatcher.subscribe( GameEvent.CELL_UNMARKED, function (status, cell) {\r\n        that.unsetFlag(cell); \r\n    });\r\n    this.model.eventDispatcher.subscribe( GameEvent.RESTART, function () {\r\n        that.restart();\r\n    });\r\n};\r\n\r\n/**\r\n * Rendering new game field\r\n */\r\nBrowserView.prototype.render = function() {\r\n    \r\n    this.button = this.createButtons();\r\n    this.insertElement(this.button);\r\n    \r\n    this.mineButton = this.createMineButton();\r\n    this.insertElement(this.mineButton);\r\n    \r\n    this.bar = this.createStatusBar();\r\n    this.insertElement(this.bar);\r\n    \r\n    this.field = this.createField();\r\n    this.insertElement(this.field);   \r\n    \r\n};\r\n\r\n/**\r\n * Updating status bar\r\n * @param {String} status\r\n */\r\nBrowserView.prototype.updateGameStatus = function(status){\r\n    \r\n    this.bar.innerHTML = status;\r\n    \r\n};\r\n\r\n/**\r\n * Updating DOMElement by add class attribute \r\n * @param {constant} status - MinesweeperGame's class constant designating cell's status\r\n * @param {({x:number, y:number}|Object.<Cell>)} cell - Coordinates of element\r\n */\r\nBrowserView.prototype.updateCellStatus = function(status, cell){\r\n    \r\n    //if ( typeof(cell[0]) === 'object' ) {\r\n    //    cell = cell[0];\r\n    //}    \r\n   \r\n    var id = ViewHelper.createIdFromCoordinates(cell);\r\n      \r\n    var targetCell = document.getElementById(id);\r\n    \r\n    ViewHelper.addClass(targetCell, status);\r\n    targetCell.innerHTML = cell.surroundingMines;\r\n    \r\n    //console.log(cell.x, cell.y, cell.surroundingMines)\r\n};\r\n\r\n/**\r\n * Set flag to cel by add class attribute \r\n * @param {Cell} cell - Target cell\r\n */\r\nBrowserView.prototype.setFlag = function(cell){\r\n    \r\n    var id = ViewHelper.createIdFromCoordinates(cell);      \r\n    var targetCell = document.getElementById(id);\r\n    \r\n    ViewHelper.addClass(targetCell, GameEvent.CELL_MARKED);    \r\n};\r\n\r\n/**\r\n * Unset flag to cel by removing class attribute \r\n * @param {Cell} cell - Target cell\r\n */\r\nBrowserView.prototype.unsetFlag = function(cell){\r\n    \r\n    var id = ViewHelper.createIdFromCoordinates(cell);      \r\n    var targetCell = document.getElementById(id);\r\n    \r\n    ViewHelper.removeClass(targetCell, GameEvent.CELL_MARKED);    \r\n};\r\n\r\n/**\r\n * Re-creating game field\r\n */\r\nBrowserView.prototype.restart = function() {\r\n    \r\n    var newField = this.createField();\r\n    this.field.innerHTML = newField.innerHTML;\r\n\r\n};\r\n\r\n/**\r\n * Generating <table> 10*10 cells\r\n * @return {DOMElement} table - Html code of table\r\n */\r\nBrowserView.prototype.createField = function() {\r\n    \r\n    var tableContent = \"\";\r\n\r\n    for (var i = 0; i < 10; i++) {\r\n        tableContent += \"<tr>\";\r\n        for (var j = 0; j < 10; j++) {\r\n            tableContent += \"<td id=x\" + j + \"y\"+ i + \"></td>\";        \r\n        }\r\n        tableContent += \"</tr>\";       \r\n    }\r\n    \r\n    var table = document.createElement('table');\r\n    table.className = \"table\";    \r\n    table.innerHTML = tableContent;\r\n    table.id = 'field';\r\n    \r\n    var that = this;   \r\n    \r\n    ViewHelper.addDelegateListener(table, 'TD', 'mousedown', function(target) {\r\n        \r\n        var cell = ViewHelper.createCellFromId(target);\r\n            \r\n        that.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.UPDATE_CELL_STATUS, cell) );\r\n        \r\n    }, 1 );\r\n    \r\n    ViewHelper.addDelegateListener(table, 'TD', 'mousedown', function(target) {\r\n        \r\n        var cell = ViewHelper.createCellFromId(target);\r\n            \r\n        that.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.CELL_MARKED, cell) );\r\n        \r\n    }, 3 );\r\n    \r\n    return table;\r\n};\r\n\r\n/**\r\n * Marked mines with '*'\r\n * @argument {Array.<Cell>} mines - Mined cells\r\n */\r\nBrowserView.prototype.showMines = function(mines) {\r\n    \r\n    for (var i = 0; i < mines.length; i++) {\r\n        \r\n        var id = ViewHelper.createIdFromCoordinates(mines[i]);\r\n      \r\n        var targetCell = document.getElementById(id);\r\n    \r\n        targetCell.innerHTML = '*';\r\n    }\r\n};\r\n\r\n/**\r\n * Generate controll buttons\r\n */\r\nBrowserView.prototype.createButtons = function() {\r\n    \r\n    var button = document.createElement('button');\r\n    \r\n    button.type = 'button';    \r\n    button.id = 'new-game';\r\n    button.class = 'button controll';\r\n    button.innerHTML = 'New Game';\r\n    \r\n    var that = this;\r\n    \r\n    button.onclick = function(event){\r\n        var target = event.target;\r\n        that.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.RESTART, target) );\r\n        console.log('restart');\r\n    };\r\n    \r\n    return button;\r\n};\r\n\r\n/**\r\n * Generate controll buttons\r\n */\r\nBrowserView.prototype.createMineButton = function() {\r\n    \r\n    var button = document.createElement('button');\r\n    \r\n    button.type = 'button';    \r\n    button.id = 'show-mines';\r\n    button.class = 'button controll';\r\n    button.innerHTML = 'Show mines';\r\n    \r\n    var that = this;\r\n    \r\n    button.onclick = function(event){\r\n        var target = event.target;\r\n        that.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.SHOW_MINES, target) );\r\n    };\r\n    \r\n    return button;\r\n};\r\n\r\n/**\r\n * Generate status bar\r\n */\r\nBrowserView.prototype.createStatusBar = function() {\r\n    \r\n    var bar = document.createElement('div');    \r\n  \r\n    bar.id = 'status-bar';\r\n    bar.class = 'status-bar';\r\n    bar.innerHTML = 'What are you waiting for?';\r\n    \r\n    return bar;\r\n};\r\n\r\n/**\r\n * Injection element in DOM\r\n * @argument {DONElement} element \r\n */\r\nBrowserView.prototype.insertElement = function (element) {\r\n    var parentElenent = document.querySelector('div[class=\"container\"]');\r\n    parentElenent.appendChild(element);\r\n};\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/BrowserView.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/BrowserView.js?");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = BrowserViewController;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\n\r\n\r\n/**\r\n * Controller for browserView\r\n * \r\n * @param   {BrowserView} view\r\n * @param   {MinesweeperGame} game\r\n */\r\nfunction BrowserViewController(view, game) {\r\n    this._view = view;\r\n    this._game = game;\r\n    \r\n    var that = this;\r\n    \r\n    // Restart Game\r\n    this._view.eventDispatcher.subscribe(GameEvent.RESTART, function() {\r\n        that._game.restart();\r\n    })\r\n\r\n    \r\n    // Open cell \r\n    this._view.eventDispatcher.subscribe(GameEvent.UPDATE_CELL_STATUS, function(type, cell) {\r\n        that._game.openCell(cell);         \r\n    })\r\n\r\n    \r\n    // Switching a flag\r\n    this._view.eventDispatcher.subscribe(GameEvent.CELL_MARKED, function(type, cell) {\r\n        that._game.switchFlag(cell);\r\n    })\r\n\r\n    \r\n    // Show mines\r\n    this._view.eventDispatcher.subscribe(GameEvent.SHOW_MINES, function() {\r\n        var mines = that._game.getMines();\r\n        that._view.showMines(mines);\r\n    })\r\n    \r\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/BrowserViewController.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/BrowserViewController.js?");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = ConsoleController;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\n\r\n/**\r\n * Console controller class\r\n * \r\n * @property {MinesweeperGame} _model - The game\r\n * @property {String} _field - Game field\r\n */\r\nfunction ConsoleController() {\r\n    \r\n    this._model = null;\r\n    this._field = '';\r\n    this.charSet = {};\r\n    \r\n    this.charSet[GameEvent.CELL_OPENED] = '.';\r\n    this.charSet[GameEvent.CELL_MINED] = '*';\r\n    this.charSet[GameEvent.CELL_MARKED] = 'F';\r\n    this.charSet[GameEvent.CELL_UNMARKED] = '+';\r\n    \r\n};\r\n\r\n/**\r\n * @param   {MinesweeperGame} model - The game\r\n */\r\nConsoleController.prototype.attach = function(model) {\r\n    \r\n    this._model = model;\r\n    \r\n    var that = this;\r\n    \r\n    this._model.eventDispatcher.subscribe( GameEvent.CELL_OPENED, function (status, cell) {\r\n        that.updateCellStatus(status, cell);\r\n    });\r\n    //this._model.eventDispatcher.subscribe(GameEvent.UPDATE_GAME_STATUS, function (type, status) {\r\n    //    that.updateGameStatus(status); \r\n    //});\r\n    this._model.eventDispatcher.subscribe( GameEvent.CELL_MARKED, function (status, cell) {\r\n        that.updateCellStatus(status, cell);\r\n    });\r\n    this._model.eventDispatcher.subscribe( GameEvent.CELL_UNMARKED, function (status, cell) {\r\n        that.updateCellStatus(status, cell);\r\n    });\r\n    //this._model.eventDispatcher.subscribe( GameEvent.RESTART, function () {\r\n    //    that.restart();\r\n    //});    \r\n   \r\n}\r\n\r\n/**\r\n * @argument {string} coordinates - Format a3, 4b etc\r\n */\r\nConsoleController.prototype.open = function(coordinates) {\r\n    \r\n    var cell = this.createCellFromString(coordinates);\r\n    \r\n    if (coordinates) {\r\n        \r\n        this._model.openCell(cell);\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * @argument {string} coordinates - Format a3, 4b etc\r\n */\r\nConsoleController.prototype.setFlag = function(coordinates) {\r\n    \r\n    var cell = this.createCellFromString(coordinates);\r\n    \r\n    if (coordinates) {\r\n        \r\n        this._model.setFlag(cell);\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * @argument {string} coordinates - Format a3, 4b etc\r\n */\r\nConsoleController.prototype.removeFlag = function(coordinates) {    \r\n    \r\n    var cell = this.createCellFromString(coordinates);\r\n    \r\n    if (coordinates) {\r\n        \r\n        this._model.unsetFlag(cell);\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nConsoleController.prototype.resign = function() {\r\n    \r\n    this._model.lose()\r\n    \r\n}\r\n\r\n/**\r\n *\r\n */\r\nConsoleController.prototype.reset = function() {\r\n    \r\n    this._model.restart();\r\n    \r\n}\r\n\r\n/**\r\n * Create Cell object from chess coordinates\r\n * \r\n * @argument {string} string - Chess style coordinates a3, b1 etc\r\n * @returns {(Cell|null)} cell - Cell object or null in case of wrong coordinates\r\n */\r\nConsoleController.prototype.createCellFromString = function(string) {\r\n    \r\n    var letter = ['A' ,'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n        \r\n    var x = letter.indexOf(string.match(\"[a-zA-Z]+\")[0].toUpperCase());\r\n    var y = string.match(\"\\\\d+\")[0];\r\n    \r\n    // Show hint in console\r\n    if (string.length < 2) {\r\n      console.log(\"Cell's coordinates must contain at least 2 symbols, ex: a3\");\r\n      return null;\r\n    }\r\n    if (x === null) {\r\n      console.log(\"Cell's first coordinate must be a letter [a-z], ex: a3\");\r\n      return null;\r\n    }\r\n    if (y === null) {\r\n      console.log(\"Cell's second coordinate must be a number [0-100], ex: a3\");\r\n      return null;\r\n    }      \r\n    \r\n    return new Cell(x, y);    \r\n}\r\n\r\n/**\r\n * Replace character-cell in field\r\n */\r\nConsoleController.prototype.updateCellStatus = function(status, cell){\r\n    \r\n    if (this._field === \"\") {\r\n       this.createField();\r\n    }\r\n    \r\n    var charNumber = cell.x * 2 + 20 * cell.y;    \r\n    var newChar = this.charSet[status];    \r\n    var field = this._field;\r\n    \r\n    if (status === GameEvent.CELL_OPENED && cell.surroundingMines !== 0) {\r\n        newChar = cell.surroundingMines;\r\n    }\r\n    \r\n    this._field = field.substring(0, charNumber) + newChar + field.substring(charNumber + 1);    \r\n   \r\n    this.show();\r\n}\r\n\r\n/**\r\n * Draw actual game state in console \r\n */\r\nConsoleController.prototype.show = function() {   \r\n   \r\n    // Print saved field\r\n    console.log(this._field);\r\n    \r\n    // Change cell-symbol in field ./1-8/*\r\n}\r\n\r\n/**\r\n * Generating '+' field\r\n */\r\nConsoleController.prototype.createField = function() {\r\n    \r\n    /* Generate '+' field\r\n     * + + .\r\n     * + 1 1 \r\n     * . 1 *\r\n     */\r\n    var field = \"\";\r\n    \r\n    for ( var i = 0; i < 10; i++ ) {\r\n        \r\n        for ( var j = 0; j < 10; j++ ) {\r\n            \r\n            field += \"+ \";            \r\n        }\r\n        // Delete last space and add newline character\r\n        field = field.slice(0, -1) + '\\n';       \r\n    }\r\n    \r\n    // Save actual field in this._field\r\n    this._field = field;\r\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/ConsoleController.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/ConsoleController.js?");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = MinesweeperGame;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\nvar EventDispatcher = __webpack_require__(0);\r\nvar Cell = __webpack_require__(9);\r\n\r\n/**\r\n * Constructor of the game\r\n * @property {(MinesweeperGame.STATUS_WIN|MinesweeperGame.STATUS_LOSE|MinesweeperGame.STATUS_PLAYING)} gameStatus - The game status\r\n * @property {Array.<Cell>} openCells - Opened cells of the gaming field\r\n * @property {Array.<Cell>} minedCells - Coordinates of mines\r\n * @property {Array.<Cell>} flaggedCells - Coordinates of flagged cells\r\n * @property {eventDispatcher} eventDispatcher - Object of EventDispatcher\r\n */\r\nfunction MinesweeperGame() {\r\n\r\n    this.gameStatus = MinesweeperGame.STATUS_PLAYING;\r\n    this.openCells = [];\r\n    this.minedCells = [];\r\n    this.flaggedCells = [];\r\n    this.eventDispatcher = new EventDispatcher();\r\n}\r\n\r\n/**\r\n * Class constants\r\n */\r\nMinesweeperGame.STATUS_WIN = 'STATUS_WIN';\r\nMinesweeperGame.STATUS_LOSE = 'STATUS_LOSE';\r\nMinesweeperGame.STATUS_PLAYING = 'STATUS_PLAYING';\r\n\r\n\r\n/**\r\n * Creates and digs mines\r\n * @param {number} mines - Quantity of creating mines\r\n * @property {Cell} cell - First opened cell\r\n */\r\nMinesweeperGame.prototype.digMines = function (mines, cell) {\r\n\r\n    this.minedCells = [];\r\n\r\n    for (var i = 0; i < mines; i++) {\r\n        do {\r\n            var x = random(0, 9);\r\n            var y = random(0, 9);\r\n            var minedCell = new Cell(x, y);\r\n            var cellIsMined = this.isCellMined(minedCell);\r\n\r\n            // If minedCell coincides with opened cell or cell is already mined\r\n        } while (x == cell.x && y == cell.y || cellIsMined);\r\n        this.minedCells.push(minedCell);\r\n    }\r\n\r\n    // Randomize coordinates\r\n    function random(min, max) {\r\n        var rand = min + Math.random() * (max + 1 - min);\r\n        rand = Math.floor(rand);\r\n        return rand;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Request gaming Status\r\n * @return {(MinesweeperGame.STATUS_WIN|MinesweeperGame.STATUS_LOSE|MinesweeperGame.STATUS_PLAYING)} - The game status\r\n */\r\nMinesweeperGame.prototype.requestStatus = function () {\r\n\r\n    return this.gameStatus;\r\n}\r\n\r\n/**\r\n * Check is cell open\r\n * @param {Cell} celll - Coordinates of a cell\r\n * @return {boolean} - True in case the cell is open, false otherwise\r\n */\r\nMinesweeperGame.prototype.isCellOpen = function (cell) {\r\n\r\n    for (var i = 0; i < this.openCells.length; i++) {\r\n        if (this.openCells[i].x == cell.x &&\r\n            this.openCells[i].y == cell.y) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Search mine at the cell\r\n * @param {Cell} celll - Coordinates of a cell\r\n * @return {boolean} - True in case the cell is mined, false otherwise\r\n */\r\nMinesweeperGame.prototype.isCellMined = function (cell) {\r\n    //console.log(cell);\r\n\r\n    for (var i = 0; i < this.minedCells.length; i++) {\r\n        //console.log(this.minedCells[i].x, cell.x);\r\n        //console.log(this.minedCells[i].y, cell.y);\r\n        if (this.minedCells[i].x == cell.x &&\r\n            this.minedCells[i].y == cell.y) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * How many mines around cell\r\n * @param {Cell} celll - Coordinates of a cell\r\n * @return {number} mines - Quantity of mines\r\n */\r\nMinesweeperGame.prototype.countSurroundingMines = function (cell) {\r\n\r\n    // Get neighbors cells\r\n    var neighborsCells = this.getNeighbors(cell, false);\r\n    //console.log('Quant neighbor:', neighborsCells);\r\n\r\n    // Sorting\r\n    function sortCell(a, b) {\r\n        var xdif = a.x - b.x;\r\n        if (xdif === 0) {\r\n            return a.y - b.y;\r\n        }\r\n        return xdif;\r\n    }\r\n\r\n    var minedCells = this.minedCells.sort(sortCell);\r\n    neighborsCells.sort(sortCell);\r\n\r\n    // Calculating intersection\r\n    var m = this.minedCells.length;\r\n    var n = neighborsCells.length;\r\n    var i = 0;\r\n    var j = 0;\r\n    var mines = 0;\r\n\r\n    while (i < m && j < n) {\r\n\r\n        if (minedCells[i].x == neighborsCells[j].x) {\r\n\r\n            if (minedCells[i].y == neighborsCells[j].y) {\r\n                mines++;\r\n                i++;\r\n                j++;\r\n                continue;\r\n            }\r\n            if (minedCells[i].y > neighborsCells[j].y) {\r\n                j++;\r\n            } else {\r\n                i++;\r\n            }\r\n        } else if (minedCells[i].x > neighborsCells[j].x) {\r\n            j++;\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return mines;\r\n}\r\n\r\n/**\r\n * Get neighbors of the cell\r\n * @param {Cell} cell - Coordinates of a cell\r\n * @param {Boolean} cross - Select vertical & horizontal cells only (except corner's cell)\r\n * @return {Cell} cells - Neighbors of the cell\r\n */\r\nMinesweeperGame.prototype.getNeighbors = function (cell, cross) {\r\n\r\n    var cells = [];\r\n\r\n    // Coordinates of first neighbor\r\n    var x = cell.x - 1;\r\n    var y = cell.y - 1;\r\n\r\n    // Quantity of cells from top left cell \r\n    var endx = 3;\r\n    var endy = 3;\r\n\r\n    // Limit coordinates by left and top field's borders\r\n    if (x === -1) {\r\n        x = 0;\r\n        endx = 2;\r\n    }\r\n    if (y === -1) {\r\n        y = 0;\r\n        endy = 2;\r\n    }\r\n\r\n    // Limit quantity of cells by right and bottom field's borders\r\n    if (x === 8) {\r\n        endx = 2;\r\n    }\r\n    if (y === 8) {\r\n        endy = 2;\r\n    }\r\n\r\n    // Generate neighbor cells\r\n    for (var i = 0; i < endx; i++) {\r\n        for (var j = 0; j < endy; j++) {\r\n            var cellx = x + i;\r\n            var celly = y + j;\r\n            var neighborCell = new Cell(cellx, celly);\r\n            cells.push(neighborCell);\r\n        }\r\n    }\r\n\r\n    // Excluding cell itself from cell's neighbor \r\n    for (var i = 0; i < cells.length; i++) {\r\n        if (cells[i].x == cell.x && cells[i].y == cell.y) {\r\n            cells.splice(i, 1);\r\n            break;\r\n        }\r\n    }\r\n\r\n    // Excluding diagonals cells\r\n    if (cross === true) {\r\n        for (var i = 0; i < cells.lenght; i++) {\r\n            if (cells[i].x - cell.x === cells[y] - cell.y) {\r\n                cells.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    //console.log(cells);\r\n    return cells\r\n}\r\n\r\n/**\r\n * Set a flag\r\n * @param {Cell} cell - Coordinates of a cell\r\n */\r\nMinesweeperGame.prototype.setFlag = function (cell) {\r\n\r\n    if (this.isCellOpen(cell)) {\r\n        return;\r\n    }\r\n            \r\n    this.flaggedCells.push(cell);\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.CELL_MARKED, cell) );\r\n}\r\n\r\n/**\r\n * Toggle a flag\r\n * @param {Cell} cell - Coordinates of a cell\r\n */\r\nMinesweeperGame.prototype.switchFlag = function(cell) {    \r\n\r\n    var index = this.isFlagged(cell);\r\n       \r\n    if ( index !== null ) {\r\n            \r\n        this.unsetFlag(cell, index);\r\n        \r\n    } else {\r\n        \r\n        this.setFlag(cell);\r\n    }\r\n}\r\n\r\n/**\r\n * Unset a flag\r\n * @param {Cell} cell - Target cell\r\n * @param {Number} index - Index of cell in this.flaggedCells array\r\n */\r\nMinesweeperGame.prototype.unsetFlag = function(cell, index) {\r\n           \r\n    this.flaggedCells.splice(index, 1);\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.CELL_UNMARKED, cell) );\r\n  \r\n}\r\n\r\n/**\r\n * Search cell among flagged cells\r\n * @param {Cell} cell - Searching cell\r\n * @returns {Number|null} - Index of call in this.flaggedCells or null if there is not cell in array\r\n */\r\nMinesweeperGame.prototype.isFlagged = function(cell) {\r\n    \r\n    for (var i = 0; i < this.flaggedCells.length; i++) {\r\n        \r\n        if (this.flaggedCells[i].x == cell.x && this.flaggedCells[i].y == cell.y) {\r\n            \r\n            return i;\r\n        }\r\n    }\r\n    \r\n    return null;\r\n}\r\n\r\n/**\r\n * Open the cell\r\n * @param {(Cell|Object<Cell>)} cell - Opening cell\r\n * @param {Boolean} recursion - True if the function called in recursion\r\n * @return {Boolean} - False in case cell is already opened \r\n */\r\nMinesweeperGame.prototype.openCell = function (cell, recursion) {\r\n    \r\n    // Start the game\r\n    if (this.openCells.length == 0) {\r\n        this.digMines(12, cell);\r\n        this.updateGameStatus(MinesweeperGame.STATUS_PLAYING);\r\n    }\r\n    \r\n    // Return false if cell already opened or flagged.\r\n    // With best regards K.O.\r\n    if (this.isCellOpen(cell) || this.isFlagged(cell) !== null ) {\r\n        return false;\r\n    }\r\n\r\n    // Change game status in case of mine detonating\r\n    if (this.isCellMined(cell)) {\r\n        if (recursion !== true) {\r\n            this.lose()\r\n            return false\r\n        }\r\n        console.log('Watch out!');\r\n        return false\r\n    }\r\n\r\n    // Counting quantity of surrounding mines\r\n    var surroundingMines = this.countSurroundingMines(cell);\r\n    cell.surroundingMines = surroundingMines;\r\n\r\n    // Add cell to openCells & return true\r\n    this.openCells.push(cell);\r\n\r\n    // Dispatching new eventDispatcher\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.CELL_OPENED, cell) );\r\n    \r\n    // Check for winning\r\n    if (this.isWin()) {\r\n        return;\r\n    };\r\n\r\n    if (surroundingMines == 0) {\r\n        // Gather cell's neighbors and launch recursion\r\n        var neighbors = this.getNeighbors(cell, true);\r\n\r\n        for (var i = 0; i < neighbors.length; i++) {\r\n            this.openCell(neighbors[i], true);\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\n/**\r\n * Restart the game\r\n */\r\nMinesweeperGame.prototype.restart = function () {\r\n\r\n    this.updateGameStatus(MinesweeperGame.STATUS_PLAYING);\r\n    this.openCells = [];\r\n    this.flaggedCells = [];\r\n    this.minedCells = [];\r\n\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.RESTART, this) );\r\n}\r\n\r\n/**\r\n * Lose the game\r\n */\r\nMinesweeperGame.prototype.lose = function () {\r\n\r\n    this.updateGameStatus(MinesweeperGame.STATUS_LOSE);\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.GAME_OVER, this) );\r\n}\r\n\r\n/**\r\n * Get all mines\r\n */\r\nMinesweeperGame.prototype.getMines = function () {\r\n\r\n    return this.minedCells;\r\n\r\n}\r\n\r\n/**\r\n * Is player win?\r\n * @returns {boolean} Returns true in case of winning\r\n */\r\nMinesweeperGame.prototype.isWin = function () {\r\n\r\n    if (this.openCells.length == 100 - this.minedCells.length) {\r\n        this.updateGameStatus(MinesweeperGame.STATUS_WIN);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Updating game status\r\n * @param {(MinesweeperGame.STATUS_WIN|MinesweeperGame.STATUS_LOSE|MinesweeperGame.STATUS_PLAYING)}\r\n */\r\nMinesweeperGame.prototype.updateGameStatus = function (status) {\r\n    \r\n    this.gameStatus = status;\r\n    this.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.UPDATE_GAME_STATUS, status) );\r\n    \r\n}\r\n\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/MinesweeperGame.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/MinesweeperGame.js?");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = ModalController;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\n\r\n/**\r\n * Controller for modalView\r\n * \r\n * @param   {modalView} view\r\n * @param   {MinesweeperGame} game\r\n */\r\nfunction ModalController(view, game) {\r\n    \r\n    this._view = view;\r\n    this._game = game;\r\n    \r\n    var that = this;\r\n    \r\n    // Restart Game\r\n    this._view.eventDispatcher.subscribe(GameEvent.RESTART, function() {\r\n        that._game.restart();\r\n    }) \r\n    \r\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/ModalController.js\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/ModalController.js?");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = ModalView;\r\n\r\n// Dependencies\r\nvar GameEvent = __webpack_require__(7);\r\nvar EventDispatcher = __webpack_require__(0);\r\n\r\n/**\r\n * Modal view\r\n * @property {DOMElement} _modalWindow - Modal window\r\n * @property {eventDispatcher} eventDispatcher - Object of EventDispatcher\r\n */\r\nfunction ModalView() {\r\n\r\n    this._modalWindow = undefined;   \r\n    this.eventDispatcher = new EventDispatcher();\r\n    \r\n}\r\n\r\n/**\r\n * Attaching model and subscribing for events\r\n * @param   {MinesweeperGame} model The game model\r\n */\r\nModalView.prototype.attach = function(model) {\r\n    \r\n    this._model = model;\r\n    var that = this;\r\n    \r\n    this._model.eventDispatcher.subscribe( GameEvent.GAME_OVER, function() {\r\n        that.render();\r\n    });\r\n}\r\n\r\n/**\r\n * Render modal window\r\n */\r\nModalView.prototype.render = function() {\r\n\r\n    var modalWindow = this.createWindow();    \r\n    var button = this.createButtons();\r\n    \r\n    modalWindow.appendChild(button);    \r\n   \r\n    this.insertElement(modalWindow);\r\n    \r\n    this._modalWindow = modalWindow;\r\n   \r\n}\r\n\r\nModalView.prototype.createWindow = function() {\r\n    \r\n    var window = document.createElement('div');\r\n    \r\n    window.className = \"modal\";\r\n    window.id = 'modal';\r\n    window.innerHTML = 'Начать новую игру';\r\n    \r\n    return window;    \r\n}\r\n\r\n/**\r\n * Generate control button\r\n */\r\nModalView.prototype.createButtons = function() {\r\n    \r\n    var button = document.createElement('button');\r\n    \r\n    button.type = 'button';    \r\n    button.id = 'modal-new-game';\r\n    button.class = 'button controll';\r\n    button.innerHTML = 'New Game';\r\n    \r\n    var that = this;\r\n    \r\n    button.onclick = function(event){\r\n        \r\n        var target = event.target;\r\n        that.eventDispatcher.dispatchEvent( new GameEvent(GameEvent.RESTART, target) );\r\n        \r\n        // Delete itself from DOM\r\n        var body = document.getElementsByTagName('body')[0];\r\n        body.removeChild(that._modalWindow);\r\n        \r\n    };\r\n    \r\n    return button;\r\n};\r\n\r\n/**\r\n * Injection element in DOM\r\n * @argument {DONElement} element \r\n */\r\nModalView.prototype.insertElement = function (element) {\r\n    var parentElement = document.getElementsByTagName('body')[0];\r\n    console.log(parentElement);\r\n    parentElement.appendChild(element);\r\n};\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/ModalView.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/ModalView.js?");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = GameEvent;\r\n\r\n\r\n/**\r\n * GameEvent store type and target of event\r\n * transferring to observer when event dispatches\r\n * \r\n * @param   {Constant} type - One of the GameEvent constant denoting game's event\r\n * @param   {Object} target - Target object of event\r\n * \r\n */\r\nfunction GameEvent(type, target) {\r\n    this.type = type;\r\n    this.target = target;\r\n}\r\n\r\n/**\r\n * GameEvent constant describing game's event types\r\n */\r\nGameEvent.GAME_OVER = 'GAME_OVER';\r\n\r\nGameEvent.UPDATE_CELL_STATUS = 'UPDATE_CELL_STATUS';\r\nGameEvent.UPDATE_GAME_STATUS = 'UPDATE_GAME_STATUS';\r\n\r\nGameEvent.CELL_OPENED = 'CELL_OPENED';\r\nGameEvent.CELL_MINED = 'CELL_MINED';\r\nGameEvent.CELL_MARKED = 'CELL_MARKED';\r\nGameEvent.CELL_UNMARKED = 'CELL_UNMARKED';\r\n\r\nGameEvent.SHOW_MINES = 'SHOW_MINES';\r\nGameEvent.RESTART = 'RESTART';\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/GameEvent.js\n// module id = 7\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/GameEvent.js?");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar MinesweeperGame = __webpack_require__(4);\r\nvar mswprGame = new MinesweeperGame();\r\n\r\nvar BrowserView = __webpack_require__(1);\r\nvar browserView = new BrowserView();\r\n\r\nvar BrowserViewController = __webpack_require__(2);\r\nvar browserViewController = new BrowserViewController(browserView, mswprGame);\r\n\r\nbrowserView.attach(mswprGame);\r\nbrowserView.render();\r\n\r\n// Exec modal view\r\nvar ModalView = __webpack_require__(6);\r\nvar modalView = new ModalView();\r\n\r\nvar ModalController = __webpack_require__(5);\r\nvar modalViewController = new ModalController(modalView, mswprGame);\r\nmodalView.attach(mswprGame);\r\n\r\n// Console controller\r\nvar ConsoleController = __webpack_require__(3);\r\nvar game = new ConsoleController();\r\ngame.attach(mswprGame);\r\n\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/ServiceApp.js\n// module id = 8\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/ServiceApp.js?");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = Cell;\r\n\r\n/**\r\n * Cell class\r\n * \r\n * @param   {number} x - X coordinate\r\n * @param   {number} y - y coordinate\r\n * @property   {boolean} mine - Mined or not\r\n * @property   {boolean} surroundingMines - Quantity of mines surrounding cell\r\n */\r\nfunction Cell(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.mine = false;\r\n    this.surroundingMines = null;\r\n}\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/Cell.js\n// module id = 9\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/Cell.js?");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n// Export the class\r\nmodule.exports = ViewHelper;\r\n\r\n// Dependencies\r\nvar Cell = __webpack_require__(9);\r\nvar eventListenerPolyfill = __webpack_require__(11).eventListenerPolyfill();\r\n\r\n\r\nfunction ViewHelper() {}\r\n\r\n/**\r\n * Create Cell from extracted cell's coordinates from DOMElement's id=x0y3\r\n * @param {DOMElement} DOMElement - Element containing id with coordinates\r\n * @return {cell}  - Cell\r\n */\r\nViewHelper.createCellFromId = function(domElement) {\r\n\r\n    var id = domElement.id;    \r\n    var arrayOfCoordinates = id.split(/\\D/);   \r\n\r\n    var cell = new Cell(arrayOfCoordinates[1], arrayOfCoordinates[2]); \r\n    \r\n    return  cell;\r\n}\r\n\r\n/**\r\n * Create id with coordinates of Cell \r\n * @param {Cell} cell - Cell object\r\n * @return {string} - Cell's id with coordinates 'id=x0y3'\r\n */\r\nViewHelper.createIdFromCoordinates = function(cell) {\r\n    return 'x' + cell.x + 'y' + cell.y;\r\n}\r\n\r\n\r\n/**\r\n * Проеверяет есть ли у переданного элемента переданный класс\r\n *\r\n * @param {DOMNode}  node  - DOM элемент\r\n * @param {string}  klass  - Проверяемый класс\r\n * @return {boolen}        - Результат проверки\r\n */\r\nViewHelper.hasClass = function(node, klass) {\r\n    \r\n    var classes = node.className.split(/\\s/);\r\n    for(var i = 0; i < classes.length; i++) {\r\n        if (classes[i] == klass) {\r\n            return true;        \r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Добавляет класс элементу, если у него еще нет переданного класса\r\n *\r\n * @param {DOMNode}  node      - DOM элемент\r\n * @param {string}  klass      - Добаляемый класс\r\n * @return {(DOMNode|null)}    - Возвращает дом-элемент в случае удачи, или null, если не удалось назначить класс\r\n */\r\nViewHelper.addClass = function(node, klass) {\r\n\r\n    var hasCheck = ViewHelper.hasClass(node, klass);\r\n        \r\n    if (!hasCheck) {\r\n        var className = node.className;\r\n        className += \" \" + klass;\r\n        // Delete space char in beginning and in end of string\r\n        var regexp = new RegExp('^\\\\s|\\\\s$');\r\n        className = className.replace(regexp, \"\");\r\n        node.className = className;\r\n        return node;\r\n    }\r\n    return null;    \r\n}\r\n\r\n/**\r\n * Удаляет класс элемента, если он имеет переданный класс\r\n *\r\n * @param {DOMNode}  node      - DOM элемент\r\n * @param {string}  klass      - Удаляемый класс\r\n * @return {(DOMNode|null)}    - Возвращает дом-элемент в случае удачи, или null, если не удалось удалить класс\r\n */\r\nViewHelper.removeClass = function(node, klass) {\r\n    if (ViewHelper.hasClass(node, klass)) {\r\n        var regexp = new RegExp('\\\\b' + klass + '\\\\b', 'i');\r\n        var className = node.className\r\n        className = className.replace(regexp, \"\");\r\n        // Deleting double space\r\n        className = className.replace(\"  \", \" \");\r\n        \r\n        node.className = className;\r\n        return node;\r\n    }    \r\n    return null;\r\n}\r\n\r\n/**\r\n * Add listener to multiple objects by delegation to ancestor\r\n * @param {NODElem} ancestorObj - Ancestor of NODElements\r\n * @param {String} targetTagName - TagName of target element\r\n * @param {String} type - Trigger event\r\n * @param {function} listener - Executing function\r\n * @param {string} forGloryOfArgumentsGod - Number of mouse button (event.witch) on mousedown\r\n */\r\nViewHelper.addDelegateListener = function(ancestorObj, targetTagName, type, listener, forGloryOfArgumentsGod) {\r\n    \r\n    ancestorObj.addEventListener(type, checkTagName);\r\n    \r\n    function checkTagName(event) {        \r\n\r\n        var target = event.target;\r\n        \r\n        // ie8 fix for which\r\n        if (!event.which && event.button) { // если which нет, но есть button... (IE8-)\r\n            if (event.button & 1) event.which = 1; // левая кнопка\r\n            else if (event.button & 4) event.which = 2; // средняя кнопка\r\n            else if (event.button & 2) event.which = 3; // правая кнопка\r\n        }\r\n      \r\n        \r\n        // Delegating event  \r\n        while (target != ancestorObj) {\r\n            \r\n            if (target.tagName === targetTagName) {\r\n\r\n                if (forGloryOfArgumentsGod && event.which == forGloryOfArgumentsGod ||\r\n                    !(forGloryOfArgumentsGod)) {\r\n                    \r\n                    listener(target);                    \r\n               \r\n                }\r\n            }\r\n            \r\n            target = target.parentNode;\r\n        }\r\n    }\r\n}\r\n\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/ViewHelper.js\n// module id = 10\n// module chunks = 0\n\n//# sourceURL=webpack:///./app/ViewHelper.js?");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nexports.eventListenerPolyfill = function eventListenerPolyfill() {\r\n\t//https://gist.github.com/jonathantneal/3748027\r\n\t//Polyfill the EventListener interface in IE8\r\n\t!window.addEventListener && (function (WindowPrototype, DocumentPrototype, ElementPrototype, addEventListener, removeEventListener, dispatchEvent, registry) {\r\n\tWindowPrototype[addEventListener] = DocumentPrototype[addEventListener] = ElementPrototype[addEventListener] = function (type, listener) {\r\n\t\tvar target = this;\r\n\r\n\t\tregistry.unshift([target, type, listener, function (event) {\r\n\t\t\tevent.currentTarget = target;\r\n\t\t\tevent.preventDefault = function () { event.returnValue = false };\r\n\t\t\tevent.stopPropagation = function () { event.cancelBubble = true };\r\n\t\t\tevent.target = event.srcElement || target;\r\n\r\n\t\t\tlistener.call(target, event);\r\n\t\t}]);\r\n\r\n\t\tthis.attachEvent(\"on\" + type, registry[0][3]);\r\n\t};\r\n\r\n\tWindowPrototype[removeEventListener] = DocumentPrototype[removeEventListener] = ElementPrototype[removeEventListener] = function (type, listener) {\r\n\t\tfor (var index = 0, register; register = registry[index]; ++index) {\r\n\t\t\tif (register[0] == this && register[1] == type && register[2] == listener) {\r\n\t\t\t\treturn this.detachEvent(\"on\" + type, registry.splice(index, 1)[0][3]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tWindowPrototype[dispatchEvent] = DocumentPrototype[dispatchEvent] = ElementPrototype[dispatchEvent] = function (eventObject) {\r\n\t\treturn this.fireEvent(\"on\" + eventObject.type, eventObject);\r\n\t};\r\n})(Window.prototype, HTMLDocument.prototype, Element.prototype, \"addEventListener\", \"removeEventListener\", \"dispatchEvent\", []);\r\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/eventListener.polyfill.js\n// module id = 11\n// module chunks = 0\n\n//# sourceURL=webpack:///./lib/eventListener.polyfill.js?");

/***/ })
/******/ ]);